
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package steps;

import java_cup.runtime.*;
import ui.IDE;
import structures.*;
import java.util.ArrayList;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class Parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public Parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public Parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\100\000\002\031\002\000\002\002\005\000\002\002" +
    "\004\000\002\002\003\000\002\006\004\000\002\006\003" +
    "\000\002\007\003\000\002\007\003\000\002\032\002\000" +
    "\002\005\011\000\002\011\003\000\002\010\004\000\002" +
    "\010\003\000\002\014\005\000\002\003\003\000\002\033" +
    "\002\000\002\034\002\000\002\004\014\000\002\015\003" +
    "\000\002\015\002\000\002\027\004\000\002\027\003\000" +
    "\002\016\003\000\002\016\003\000\002\016\003\000\002" +
    "\016\003\000\002\016\003\000\002\016\003\000\002\016" +
    "\003\000\002\012\005\000\002\035\002\000\002\036\002" +
    "\000\002\037\002\000\002\017\015\000\002\030\006\000" +
    "\002\030\002\000\002\040\002\000\002\041\002\000\002" +
    "\042\002\000\002\043\002\000\002\020\015\000\002\044" +
    "\002\000\002\021\007\000\002\045\002\000\002\022\010" +
    "\000\002\046\002\000\002\023\010\000\002\024\004\000" +
    "\002\026\005\000\002\026\005\000\002\026\005\000\002" +
    "\026\005\000\002\026\004\000\002\026\003\000\002\026" +
    "\003\000\002\026\005\000\002\026\005\000\002\025\005" +
    "\000\002\025\005\000\002\025\005\000\002\025\005\000" +
    "\002\025\005\000\002\025\005\000\002\025\005" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\177\000\006\027\007\034\001\001\002\000\004\002" +
    "\ufffe\001\002\000\004\002\201\001\002\000\004\034\160" +
    "\001\002\000\004\017\010\001\002\000\004\020\011\001" +
    "\002\000\004\023\012\001\002\000\022\022\uffee\025\031" +
    "\026\026\030\023\031\013\032\027\033\025\035\032\001" +
    "\002\000\004\017\140\001\002\000\022\022\uffef\025\031" +
    "\026\026\030\023\031\013\032\027\033\025\035\032\001" +
    "\002\000\022\022\uffe7\025\uffe7\026\uffe7\030\uffe7\031\uffe7" +
    "\032\uffe7\033\uffe7\035\uffe7\001\002\000\004\022\ufff9\001" +
    "\002\000\022\022\uffec\025\uffec\026\uffec\030\uffec\031\uffec" +
    "\032\uffec\033\uffec\035\uffec\001\002\000\022\022\uffea\025" +
    "\uffea\026\uffea\030\uffea\031\uffea\032\uffea\033\uffea\035\uffea" +
    "\001\002\000\022\022\uffe6\025\uffe6\026\uffe6\030\uffe6\031" +
    "\uffe6\032\uffe6\033\uffe6\035\uffe6\001\002\000\022\022\uffe9" +
    "\025\uffe9\026\uffe9\030\uffe9\031\uffe9\032\uffe9\033\uffe9\035" +
    "\uffe9\001\002\000\004\017\076\001\002\000\022\022\uffeb" +
    "\025\uffeb\026\uffeb\030\uffeb\031\uffeb\032\uffeb\033\uffeb\035" +
    "\uffeb\001\002\000\004\017\071\001\002\000\004\016\uffd8" +
    "\001\002\000\004\017\037\001\002\000\022\022\uffe8\025" +
    "\uffe8\026\uffe8\030\uffe8\031\uffe8\032\uffe8\033\uffe8\035\uffe8" +
    "\001\002\000\004\026\035\001\002\000\004\021\034\001" +
    "\002\000\022\022\uffe5\025\uffe5\026\uffe5\030\uffe5\031\uffe5" +
    "\032\uffe5\033\uffe5\035\uffe5\001\002\000\022\022\uffd2\025" +
    "\uffd2\026\uffd2\030\uffd2\031\uffd2\032\uffd2\033\uffd2\035\uffd2" +
    "\001\002\000\004\021\036\001\002\000\022\022\uffe4\025" +
    "\uffe4\026\uffe4\030\uffe4\031\uffe4\032\uffe4\033\uffe4\035\uffe4" +
    "\001\002\000\004\024\040\001\002\000\004\020\uffd4\001" +
    "\002\000\004\020\042\001\002\000\004\021\043\001\002" +
    "\000\022\022\uffd3\025\uffd3\026\uffd3\030\uffd3\031\uffd3\032" +
    "\uffd3\033\uffd3\035\uffd3\001\002\000\004\016\045\001\002" +
    "\000\012\005\050\017\046\026\051\037\047\001\002\000" +
    "\012\005\050\017\046\026\051\037\047\001\002\000\032" +
    "\004\uffcc\005\uffcc\006\uffcc\007\uffcc\010\uffcc\011\uffcc\012" +
    "\uffcc\013\uffcc\014\uffcc\015\uffcc\020\uffcc\021\uffcc\001\002" +
    "\000\012\005\050\017\046\026\051\037\047\001\002\000" +
    "\034\004\uffcb\005\uffcb\006\uffcb\007\uffcb\010\uffcb\011\uffcb" +
    "\012\uffcb\013\uffcb\014\uffcb\015\uffcb\017\064\020\uffcb\021" +
    "\uffcb\001\002\000\014\004\054\005\055\006\057\007\056" +
    "\021\053\001\002\000\022\022\uffd7\025\uffd7\026\uffd7\030" +
    "\uffd7\031\uffd7\032\uffd7\033\uffd7\035\uffd7\001\002\000\012" +
    "\005\050\017\046\026\051\037\047\001\002\000\012\005" +
    "\050\017\046\026\051\037\047\001\002\000\012\005\050" +
    "\017\046\026\051\037\047\001\002\000\012\005\050\017" +
    "\046\026\051\037\047\001\002\000\032\004\uffcf\005\uffcf" +
    "\006\uffcf\007\uffcf\010\uffcf\011\uffcf\012\uffcf\013\uffcf\014" +
    "\uffcf\015\uffcf\020\uffcf\021\uffcf\001\002\000\032\004\uffce" +
    "\005\uffce\006\uffce\007\uffce\010\uffce\011\uffce\012\uffce\013" +
    "\uffce\014\uffce\015\uffce\020\uffce\021\uffce\001\002\000\032" +
    "\004\uffd0\005\uffd0\006\057\007\056\010\uffd0\011\uffd0\012" +
    "\uffd0\013\uffd0\014\uffd0\015\uffd0\020\uffd0\021\uffd0\001\002" +
    "\000\032\004\uffd1\005\uffd1\006\057\007\056\010\uffd1\011" +
    "\uffd1\012\uffd1\013\uffd1\014\uffd1\015\uffd1\020\uffd1\021\uffd1" +
    "\001\002\000\004\020\065\001\002\000\032\004\uffc9\005" +
    "\uffc9\006\uffc9\007\uffc9\010\uffc9\011\uffc9\012\uffc9\013\uffc9" +
    "\014\uffc9\015\uffc9\020\uffc9\021\uffc9\001\002\000\032\004" +
    "\uffcd\005\uffcd\006\057\007\056\010\uffcd\011\uffcd\012\uffcd" +
    "\013\uffcd\014\uffcd\015\uffcd\020\uffcd\021\uffcd\001\002\000" +
    "\014\004\054\005\055\006\057\007\056\020\070\001\002" +
    "\000\032\004\uffca\005\uffca\006\uffca\007\uffca\010\uffca\011" +
    "\uffca\012\uffca\013\uffca\014\uffca\015\uffca\020\uffca\021\uffca" +
    "\001\002\000\012\005\050\017\046\026\051\037\047\001" +
    "\002\000\014\004\054\005\055\006\057\007\056\020\uffd6" +
    "\001\002\000\004\020\074\001\002\000\004\021\075\001" +
    "\002\000\022\022\uffd5\025\uffd5\026\uffd5\030\uffd5\031\uffd5" +
    "\032\uffd5\033\uffd5\035\uffd5\001\002\000\012\005\uffe3\017" +
    "\uffe3\026\uffe3\037\uffe3\001\002\000\012\005\050\017\101" +
    "\026\051\037\047\001\002\000\010\014\115\015\117\020" +
    "\uffe2\001\002\000\012\005\050\017\101\026\051\037\047" +
    "\001\002\000\022\004\054\005\055\006\057\007\056\010" +
    "\106\011\104\012\103\013\105\001\002\000\012\005\050" +
    "\017\046\026\051\037\047\001\002\000\012\005\050\017" +
    "\046\026\051\037\047\001\002\000\012\005\050\017\046" +
    "\026\051\037\047\001\002\000\012\005\050\017\046\026" +
    "\051\037\047\001\002\000\020\004\054\005\055\006\057" +
    "\007\056\014\uffc4\015\uffc4\020\uffc4\001\002\000\020\004" +
    "\054\005\055\006\057\007\056\014\uffc5\015\uffc5\020\uffc5" +
    "\001\002\000\020\004\054\005\055\006\057\007\056\014" +
    "\uffc3\015\uffc3\020\uffc3\001\002\000\020\004\054\005\055" +
    "\006\057\007\056\014\uffc6\015\uffc6\020\uffc6\001\002\000" +
    "\010\014\115\015\117\020\116\001\002\000\024\004\054" +
    "\005\055\006\057\007\056\010\106\011\104\012\103\013" +
    "\105\020\070\001\002\000\012\005\050\017\101\026\051" +
    "\037\047\001\002\000\010\014\uffc2\015\uffc2\020\uffc2\001" +
    "\002\000\012\005\050\017\101\026\051\037\047\001\002" +
    "\000\010\014\uffc7\015\uffc7\020\uffc7\001\002\000\010\014" +
    "\uffc8\015\uffc8\020\uffc8\001\002\000\004\020\123\001\002" +
    "\000\004\023\124\001\002\000\022\022\uffee\025\031\026" +
    "\026\030\023\031\013\032\027\033\025\035\032\001\002" +
    "\000\004\022\126\001\002\000\024\022\uffe1\025\uffe1\026" +
    "\uffe1\030\uffe1\031\uffe1\032\uffe1\033\uffe1\035\uffe1\036\uffe1" +
    "\001\002\000\024\022\uffde\025\uffde\026\uffde\030\uffde\031" +
    "\uffde\032\uffde\033\uffde\035\uffde\036\130\001\002\000\004" +
    "\023\132\001\002\000\022\022\uffe0\025\uffe0\026\uffe0\030" +
    "\uffe0\031\uffe0\032\uffe0\033\uffe0\035\uffe0\001\002\000\022" +
    "\022\uffee\025\031\026\026\030\023\031\013\032\027\033" +
    "\025\035\032\001\002\000\004\022\134\001\002\000\022" +
    "\022\uffdf\025\uffdf\026\uffdf\030\uffdf\031\uffdf\032\uffdf\033" +
    "\uffdf\035\uffdf\001\002\000\004\022\136\001\002\000\004" +
    "\002\ufff8\001\002\000\022\022\uffed\025\uffed\026\uffed\030" +
    "\uffed\031\uffed\032\uffed\033\uffed\035\uffed\001\002\000\012" +
    "\005\uffdd\017\uffdd\026\uffdd\037\uffdd\001\002\000\012\005" +
    "\050\017\101\026\051\037\047\001\002\000\010\014\115" +
    "\015\117\020\uffdc\001\002\000\004\020\144\001\002\000" +
    "\004\023\145\001\002\000\022\022\uffdb\025\uffdb\026\uffdb" +
    "\030\uffdb\031\uffdb\032\uffdb\033\uffdb\035\uffdb\001\002\000" +
    "\022\022\uffee\025\031\026\026\030\023\031\013\032\027" +
    "\033\025\035\032\001\002\000\004\022\uffda\001\002\000" +
    "\004\022\151\001\002\000\022\022\uffd9\025\uffd9\026\uffd9" +
    "\030\uffd9\031\uffd9\032\uffd9\033\uffd9\035\uffd9\001\002\000" +
    "\006\027\007\034\160\001\002\000\006\027\ufff3\034\ufff3" +
    "\001\002\000\006\027\ufffa\034\ufffa\001\002\000\006\027" +
    "\ufff7\034\ufff7\001\002\000\006\027\ufffb\034\ufffb\001\002" +
    "\000\006\027\ufffc\034\ufffc\001\002\000\004\026\161\001" +
    "\002\000\006\017\163\021\162\001\002\000\026\022\ufff4" +
    "\025\ufff4\026\ufff4\027\ufff4\030\ufff4\031\ufff4\032\ufff4\033" +
    "\ufff4\034\ufff4\035\ufff4\001\002\000\004\020\164\001\002" +
    "\000\004\023\ufff2\001\002\000\004\023\166\001\002\000" +
    "\004\034\171\001\002\000\024\022\ufff5\025\ufff5\026\ufff5" +
    "\030\ufff5\031\ufff5\032\ufff5\033\ufff5\034\ufff5\035\ufff5\001" +
    "\002\000\024\022\uffee\025\031\026\026\030\023\031\013" +
    "\032\027\033\025\034\171\035\032\001\002\000\004\026" +
    "\172\001\002\000\004\021\162\001\002\000\004\022\ufff1" +
    "\001\002\000\024\022\ufff6\025\ufff6\026\ufff6\030\ufff6\031" +
    "\ufff6\032\ufff6\033\ufff6\034\ufff6\035\ufff6\001\002\000\004" +
    "\022\176\001\002\000\006\027\ufff0\034\ufff0\001\002\000" +
    "\004\002\000\001\002\000\006\027\ufffd\034\ufffd\001\002" +
    "\000\004\002\uffff\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\177\000\010\002\004\005\003\031\005\001\001\000" +
    "\002\001\001\000\002\001\001\000\016\003\153\004\152" +
    "\006\151\007\156\011\155\014\154\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\026\012\032" +
    "\015\015\016\016\017\023\020\017\021\021\022\027\023" +
    "\014\024\020\027\013\001\001\000\002\001\001\000\022" +
    "\012\032\016\136\017\023\020\017\021\021\022\027\023" +
    "\014\024\020\001\001\000\002\001\001\000\004\032\134" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\044\043\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\046\040\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\026\051\001\001\000\004\026\066" +
    "\001\001\000\002\001\001\000\004\026\065\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\026\062\001\001\000\004\026\061\001\001\000\004\026" +
    "\060\001\001\000\004\026\057\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\026\071\001\001\000" +
    "\004\045\072\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\035\076\001\001\000\006\025" +
    "\077\026\101\001\001\000\004\036\121\001\001\000\006" +
    "\025\112\026\113\001\001\000\002\001\001\000\004\026" +
    "\111\001\001\000\004\026\110\001\001\000\004\026\107" +
    "\001\001\000\004\026\106\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\025\120\026\101\001" +
    "\001\000\002\001\001\000\006\025\117\026\101\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\026\012\032\015\124\016\016\017\023" +
    "\020\017\021\021\022\027\023\014\024\020\027\013\001" +
    "\001\000\002\001\001\000\004\037\126\001\001\000\004" +
    "\030\130\001\001\000\002\001\001\000\002\001\001\000" +
    "\026\012\032\015\132\016\016\017\023\020\017\021\021" +
    "\022\027\023\014\024\020\027\013\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\040\140\001\001\000\006\025" +
    "\141\026\101\001\001\000\004\041\142\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\042\145\001\001\000" +
    "\026\012\032\015\146\016\016\017\023\020\017\021\021" +
    "\022\027\023\014\024\020\027\013\001\001\000\004\043" +
    "\147\001\001\000\002\001\001\000\002\001\001\000\016" +
    "\003\153\004\152\005\176\007\177\011\155\014\154\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\033\164\001\001\000\002\001\001\000\006\010\167\014" +
    "\166\001\001\000\002\001\001\000\030\012\032\014\173" +
    "\015\172\016\016\017\023\020\017\021\021\022\027\023" +
    "\014\024\020\027\013\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\034\174\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 2;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}




    public void syntax_error(java_cup.runtime.Symbol s){
        IDE.error = true;
        IDE.errMessage = IDE.errMessage +("Compiler has detected a syntax error at line " + (s.left+1) 
            + " column " + s.right + " symbol " + s.value);
    }
    public void report_fatal_error(String message, Object info) {
        IDE.error = true;
        IDE.errMessage = IDE.errMessage +("Fatal Error! Your code is about to explode");
    }


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$Parser$actions {


    Table table;
    int inWhile;
    int direction;
    int scope;
    int countIf;
    int countLoop;
    int countConstant;
    IntermediateCode intermediateFile;
    Stack ifStack;
    Stack loopStack;
    ArrayList<String> constantList;

    void init(){
        scope = 0;
        table = new Table();
        inWhile = 0;
        direction = 30000;
        countIf = 0;
        countLoop = 0;
        countConstant = 0;
        ifStack = new Stack();
        loopStack = new Stack();
        constantList = new ArrayList<>();
        
        intermediateFile = new IntermediateCode("intermediate.ci");
        intermediateFile.openFile();
    }

    void destroyScope(){
        table.destroyScope();
    }

    Expression makeCall(String e){
        intermediateFile.write(new IntermediateLine("LOAD_SUBPROGRAM",String.valueOf(table.getSymbolDirection(e,scope)),"null",String.valueOf(direction)));
        return new Expression(direction++);
    }

    boolean isSub(String id){
        return table.ContainedInSymbolTable(id, scope);
    }

    boolean exists(String symbol, int scope){
        return table.ContainedInSymbolTable(symbol, scope);
    }
    void addNewSymbol(int code, String symbol){
        table.addNewSymbol(code, symbol, direction);
        direction++;
    }
    Expression plus(Expression e1, Expression e2){
        intermediateFile.write(new IntermediateLine("PLUS",String.valueOf(e1.getDirection()),String.valueOf(e2.getDirection()),String.valueOf(direction)));
        return new Expression(direction++);
    }
    Expression minus(Expression e1, Expression e2){
        intermediateFile.write(new IntermediateLine("MINUS",String.valueOf(e1.getDirection()),String.valueOf(e2.getDirection()),String.valueOf(direction)));
        return new Expression(direction++);
    }
    Expression times(Expression e1, Expression e2){
       intermediateFile.write(new IntermediateLine("TIMES",String.valueOf(e1.getDirection()),String.valueOf(e2.getDirection()),String.valueOf(direction)));
       return new Expression(direction++);
    }
    Expression divide(Expression e1, Expression e2){
        intermediateFile.write(new IntermediateLine("DIVIDE",String.valueOf(e1.getDirection()),String.valueOf(e2.getDirection()),String.valueOf(direction)));
        return new Expression(direction++);
    }
    Expression number(String e1){
        intermediateFile.write(new IntermediateLine("LOAD_NUMBER",e1,"null",String.valueOf(direction)));
        return new Expression(direction++);
    }
    Expression identifier(String e1){
        intermediateFile.write(new IntermediateLine("LOAD_DIRECTION",String.valueOf(table.getSymbolDirection(e1,scope)),"null",String.valueOf(direction)));
        return new Expression(direction++);
    }
    /*Expression minusAux(Expression e1){
        intermediateFile.write(new IntermediateLine("PLUS",String.valueOf(e1.getDirection()),String.valueOf(e2.getDirection()),String.valueOf(direction)));
        return new Expression(direction++);
    }*/
    

    Expression and(Expression e1, Expression e2){
        intermediateFile.write(new IntermediateLine("AND",String.valueOf(e1.getDirection()),String.valueOf(e2.getDirection()),String.valueOf(direction)));
        return new Expression(direction++);
    }
    Expression or(Expression e1, Expression e2){
       intermediateFile.write(new IntermediateLine("OR",String.valueOf(e1.getDirection()),String.valueOf(e2.getDirection()),String.valueOf(direction)));
        return new Expression(direction++);
    }
    Expression equal(Expression e1, Expression e2){
        intermediateFile.write(new IntermediateLine("EQUAL",String.valueOf(e1.getDirection()),String.valueOf(e2.getDirection()),String.valueOf(direction)));
        return new Expression(direction++);
    }
    Expression notequal(Expression e1, Expression e2){
        intermediateFile.write(new IntermediateLine("NOTEQUAL",String.valueOf(e1.getDirection()),String.valueOf(e2.getDirection()),String.valueOf(direction)));
        return new Expression(direction++);
    }
    Expression more(Expression e1, Expression e2){
        intermediateFile.write(new IntermediateLine("MORE",String.valueOf(e1.getDirection()),String.valueOf(e2.getDirection()),String.valueOf(direction)));
        return new Expression(direction++);
    }
    Expression less(Expression e1, Expression e2){
        intermediateFile.write(new IntermediateLine("LESS",String.valueOf(e1.getDirection()),String.valueOf(e2.getDirection()),String.valueOf(direction)));
        return new Expression(direction++);
    }   
    void asignValue(String id, Expression e){
        intermediateFile.write(new IntermediateLine("LOAD_DIRECTION", String.valueOf(e.getDirection()), "null",String.valueOf(table.getSymbolDirection(id,scope))));      
    }
    void closeIntermediateFile(){
        intermediateFile.close();
    }
    void condicion(Expression e, int number){
        intermediateFile.write(new IntermediateLine("JUMP_CONDITION", String.valueOf(e.getDirection()), "null","ELSE_"+String.valueOf(number)));
    }
    void condition2(Expression e, int number) {
        intermediateFile.write(new IntermediateLine("JUMP_CONDITION", String.valueOf(e.getDirection()), "null","LOOPEND_"+String.valueOf(number)));
    }
    void jumpLabel(String label, int number){
        intermediateFile.write(new IntermediateLine("JUMP_LABEL", "null", "null", label+"_"+String.valueOf(number)));
    }
    void setLabel(String label, int number){
        intermediateFile.write(new IntermediateLine("LABEL", "null", "null", label+"_"+String.valueOf(number)));
    }
    void printW(Expression e){
        intermediateFile.write(new IntermediateLine("PRINT_INT", String.valueOf(e.getDirection()), "null", "null"));        
    }
    void printS(String c, int number){
        constantList.add(c);
        intermediateFile.write(new IntermediateLine("PRINT_CONSTANT", "CONSTANT_"+String.valueOf(number), "null", "null"));        
    }
    void generateConstants() {
        for(int i=0; i<constantList.size(); i++){
            intermediateFile.write(new IntermediateLine("PUT_CONSTANT", "CONSTANT_"+String.valueOf(i+1), "null", constantList.get(i)));          
        }
    }
    void programEnd(){
        intermediateFile.write(new IntermediateLine("END", "null", "null", "null"));          
    }

    void generateFinalCode(){
        FinalCode finalCode = new FinalCode("final.ens");
        try {
            finalCode.translateCode(intermediateFile);
        } catch (Exception e){

        }
    }


  private final Parser parser;

  /** Constructor */
  CUP$Parser$actions(Parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action_part00000000(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Parser$result;

      /* select the action based on the action number */
      switch (CUP$Parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // NT$0 ::= 
            {
              Object RESULT =null;

                init();
            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$0",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // program ::= NT$0 decl body 
            {
              Object RESULT =null;
              // propagate RESULT from NT$0
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("program",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // $START ::= program EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = start_val;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Parser$parser.done_parsing();
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // program ::= body 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("program",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // decl ::= decl dec 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("decl",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // decl ::= dec 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("decl",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // dec ::= varlist 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("dec",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // dec ::= sublist 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("dec",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // NT$1 ::= 
            {
              Object RESULT =null;

                    programEnd();
                    generateConstants();              
                    closeIntermediateFile();
                    generateFinalCode();
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$1",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // body ::= MAIN LPAR RPAR LKEY stmtlist NT$1 RKEY 
            {
              Object RESULT =null;
              // propagate RESULT from NT$1
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("body",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // varlist ::= var 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("varlist",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // varlistaux ::= varlistaux var 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("varlistaux",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // varlistaux ::= var 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("varlistaux",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // var ::= INT IDENTIFIER SEMICOLON 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 if(!exists(id.toString(),scope)){
                                                            addNewSymbol(sym.INT, (id.toString()+"_"+scope));
                                                        }else{
                                                            IDE.error = true;
                                                            IDE.errMessage = IDE.errMessage +(ErrorMessage.VARIABLEEXISTS+id.toString());}
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("var",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // sublist ::= subprogram 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sublist",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // NT$2 ::= 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
if(!exists(id.toString(),scope)){
                                                            addNewSymbol(sym.INT, (id.toString()+"_"+3));
                                                        }else{
                                                            IDE.error = true;
                                                            IDE.errMessage = IDE.errMessage +(ErrorMessage.VARIABLEEXISTS+id.toString());}
                                            
                                        scope++;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$2",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // NT$3 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-6)).value;
scope--;destroyScope();
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$3",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // subprogram ::= INT IDENTIFIER LPAR RPAR NT$2 LKEY varlistaux stmtlist NT$3 RKEY 
            {
              Object RESULT =null;
              // propagate RESULT from NT$3
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-8)).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("subprogram",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-9)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // stmtlist ::= stmts 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("stmtlist",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // stmtlist ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("stmtlist",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // stmts ::= stmts stmt 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("stmts",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // stmts ::= stmt 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("stmts",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // stmt ::= ifstmt 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("stmt",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // stmt ::= whilestmt 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("stmt",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // stmt ::= asignstmt 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("stmt",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // stmt ::= putwstmt 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("stmt",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // stmt ::= putsstmt 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("stmt",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // stmt ::= breakstmt 
            {
              Object RESULT =null;
		if(inWhile==0){IDE.error = true;IDE.errMessage = IDE.errMessage +(ErrorMessage.BREAKERROR);}
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("stmt",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // stmt ::= retstmt 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("stmt",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // retstmt ::= RETURN IDENTIFIER SEMICOLON 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("retstmt",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // NT$4 ::= 
            {
              Object RESULT =null;

                        countIf++;ifStack.push(countIf);
                    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$4",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // NT$5 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expression c = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

                        condicion(c, ifStack.top());
                    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$5",28, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // NT$6 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		Expression c = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;

                        jumpLabel("ENDIF", ifStack.top());
                        setLabel("ELSE", ifStack.top());
                    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$6",29, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // ifstmt ::= IF LPAR NT$4 cond NT$5 RPAR LKEY stmtlist RKEY NT$6 elsestmt 
            {
              Object RESULT =null;
              // propagate RESULT from NT$6
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).right;
		Expression c = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-7)).value;
		
                        setLabel("ENDIF", ifStack.top());
                        ifStack.pop();
                    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ifstmt",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-10)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // elsestmt ::= ELSE LKEY stmtlist RKEY 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("elsestmt",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // elsestmt ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("elsestmt",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // NT$7 ::= 
            {
              Object RESULT =null;

                        countLoop++;
                        loopStack.push(countLoop);
                        setLabel("LOOP", loopStack.top());
                    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$7",30, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // NT$8 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expression c = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

                        condition2(c, loopStack.top());
                    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$8",31, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // NT$9 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Expression c = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;

                        inWhile++;
                    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$9",32, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // NT$10 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		Expression c = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;

                        inWhile--;
                    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$10",33, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // whilestmt ::= WHILE LPAR NT$7 cond NT$8 RPAR LKEY NT$9 stmtlist NT$10 RKEY 
            {
              Object RESULT =null;
              // propagate RESULT from NT$10
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).right;
		Expression c = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-7)).value;
		
                        jumpLabel("LOOP", loopStack.top());
                        setLabel("LOOPEND", loopStack.top());
                        loopStack.pop();
                    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("whilestmt",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-10)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // NT$11 ::= 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

                        if(!exists(id.toString(),scope)){
                            IDE.error = true;
                            IDE.errMessage = IDE.errMessage +(ErrorMessage.NOVARIABLE+id.toString());
                        }
                    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$11",34, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // asignstmt ::= IDENTIFIER NT$11 ASIGN ope SEMICOLON 
            {
              Object RESULT =null;
              // propagate RESULT from NT$11
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
                        asignValue(id.toString(), e);
                    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("asignstmt",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // NT$12 ::= 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

                        printW(e);
                    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$12",35, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // putwstmt ::= PUTW LPAR ope NT$12 RPAR SEMICOLON 
            {
              Object RESULT =null;
              // propagate RESULT from NT$12
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("putwstmt",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // NT$13 ::= 
            {
              Object RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

                        countConstant++;
                        printS(c.toString(), countConstant);
                    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$13",36, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // putsstmt ::= PUTS LPAR CONSTANT NT$13 RPAR SEMICOLON 
            {
              Object RESULT =null;
              // propagate RESULT from NT$13
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("putsstmt",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // breakstmt ::= BREAK SEMICOLON 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("breakstmt",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // ope ::= ope PLUS ope 
            {
              Expression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT=plus(e1,e2);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ope",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // ope ::= ope MINUS ope 
            {
              Expression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT=minus(e1,e2);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ope",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // ope ::= ope TIMES ope 
            {
              Expression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT=times(e1,e2);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ope",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // ope ::= ope DIVIDE ope 
            {
              Expression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT=divide(e1,e2);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ope",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // ope ::= MINUS ope 
            {
              Expression RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		//RESULT=minus(e);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ope",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // ope ::= NUMBER 
            {
              Expression RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Integer n = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT=number(n.toString());
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ope",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // ope ::= IDENTIFIER 
            {
              Expression RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		if(!exists(id.toString(),scope)){
                                                            IDE.error = true;IDE.errMessage = IDE.errMessage +(ErrorMessage.NOVARIABLE+id.toString());RESULT=identifier(null);
                                                          }else{RESULT=identifier(id.toString());}
                                                           
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ope",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // ope ::= LPAR ope RPAR 
            {
              Expression RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT=e;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ope",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // ope ::= IDENTIFIER LPAR RPAR 
            {
              Expression RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		if(!isSub(id.toString())){
                                                            IDE.error = true;IDE.errMessage = IDE.errMessage +(ErrorMessage.NOVARIABLE+id.toString());RESULT=identifier(null);
                                                          }else{RESULT=makeCall(id.toString());}
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ope",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // cond ::= cond AND cond 
            {
              Expression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT=and(e1,e2);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("cond",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // cond ::= cond OR cond 
            {
              Expression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT=or(e1,e2);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("cond",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // cond ::= ope EQUAL ope 
            {
              Expression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT=equal(e1,e2);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("cond",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // cond ::= ope NOTEQUAL ope 
            {
              Expression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT=notequal(e1,e2);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("cond",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // cond ::= ope MORE ope 
            {
              Expression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT=more(e1,e2);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("cond",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // cond ::= ope LESS ope 
            {
              Expression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT=less(e1,e2);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("cond",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // cond ::= LPAR cond RPAR 
            {
              Expression RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT=e;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("cond",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$Parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
              return CUP$Parser$do_action_part00000000(
                               CUP$Parser$act_num,
                               CUP$Parser$parser,
                               CUP$Parser$stack,
                               CUP$Parser$top);
    }
}

}
