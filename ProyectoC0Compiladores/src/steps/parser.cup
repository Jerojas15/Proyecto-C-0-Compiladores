package steps;

import java_cup.runtime.*;
import ui.IDE;
import structures.*;
import java.util.ArrayList;

parser code {:

    public void syntax_error(java_cup.runtime.Symbol s){
        IDE.error = true;
        IDE.errMessage = IDE.errMessage +("Compiler has detected a syntax error at line " + (s.left+1) 
            + " column " + s.right + " symbol " + s.value);
    }
    public void report_fatal_error(String message, Object info) {
        IDE.error = true;
        IDE.errMessage = IDE.errMessage +("Fatal Error! Your code is about to explode");
    }
:};

action code {:
    Table table;
    int inWhile;
    int direction;
    int countIf;
    int countLoop;
    int countConstant;
    IntermediateCode intermediateFile;
    Stack ifStack;
    Stack loopStack;
    ArrayList<String> constantList;
    ArrayList<StringPair> stringList;
    void init(){
        table = new Table();
        inWhile = 0;
        direction = 30000;
        countIf = 0;
        countLoop = 0;
        countConstant = 0;
        ifStack = new Stack();
        loopStack = new Stack();
        constantList = new ArrayList<>();
        stringList = new ArrayList<>();
        
        intermediateFile = new IntermediateCode("intermediate.ci");
        intermediateFile.openFile();
    }
    boolean exists(String symbol){
        return table.ContainedInSymbolTable(symbol);
    }
    void addNewSymbol(int code, String symbol){
        table.addNewSymbol(code, symbol, direction);
        direction++;
    }
    void addNewSymbol2(int code, String symbol, int size){
        table.addNewSymbol(code, symbol, direction, size);
        for (int i=0; i<size; i++){
            direction++;
        }     
    }
    Expression plus(Expression e1, Expression e2){
        intermediateFile.write(new IntermediateLine("PLUS",String.valueOf(e1.getDirection()),String.valueOf(e2.getDirection()),String.valueOf(direction)));
        return new Expression(direction++);
    }
    Expression minus(Expression e1, Expression e2){
        intermediateFile.write(new IntermediateLine("MINUS",String.valueOf(e1.getDirection()),String.valueOf(e2.getDirection()),String.valueOf(direction)));
        return new Expression(direction++);
    }
    Expression times(Expression e1, Expression e2){
       intermediateFile.write(new IntermediateLine("TIMES",String.valueOf(e1.getDirection()),String.valueOf(e2.getDirection()),String.valueOf(direction)));
       return new Expression(direction++);
    }
    Expression divide(Expression e1, Expression e2){
        intermediateFile.write(new IntermediateLine("DIVIDE",String.valueOf(e1.getDirection()),String.valueOf(e2.getDirection()),String.valueOf(direction)));
        return new Expression(direction++);
    }
    Expression number(String e1){
        intermediateFile.write(new IntermediateLine("LOAD_NUMBER",e1,"null",String.valueOf(direction)));
        return new Expression(direction++);
    }
    Expression string(String var, String id){        
        //intermediateFile.write(new IntermediateLine("PUT_CONSTANT", id, "null", var));
        stringList.add(new StringPair(id, var));
        return new Expression(direction++);
    }
    Expression identifier(String e1){
        intermediateFile.write(new IntermediateLine("LOAD_DIRECTION",String.valueOf(table.getSymbolDirection(e1)),"null",String.valueOf(direction)));
        return new Expression(direction++);
    }
    /*Expression minusAux(Expression e1){
        intermediateFile.write(new IntermediateLine("PLUS",String.valueOf(e1.getDirection()),String.valueOf(e2.getDirection()),String.valueOf(direction)));
        return new Expression(direction++);
    }*/
    
    Expression and(Expression e1, Expression e2){
        intermediateFile.write(new IntermediateLine("AND",String.valueOf(e1.getDirection()),String.valueOf(e2.getDirection()),String.valueOf(direction)));
        return new Expression(direction++);
    }
    Expression or(Expression e1, Expression e2){
       intermediateFile.write(new IntermediateLine("OR",String.valueOf(e1.getDirection()),String.valueOf(e2.getDirection()),String.valueOf(direction)));
        return new Expression(direction++);
    }
    Expression equal(Expression e1, Expression e2){
        intermediateFile.write(new IntermediateLine("EQUAL",String.valueOf(e1.getDirection()),String.valueOf(e2.getDirection()),String.valueOf(direction)));
        return new Expression(direction++);
    }
    Expression notequal(Expression e1, Expression e2){
        intermediateFile.write(new IntermediateLine("NOTEQUAL",String.valueOf(e1.getDirection()),String.valueOf(e2.getDirection()),String.valueOf(direction)));
        return new Expression(direction++);
    }
    Expression more(Expression e1, Expression e2){
        intermediateFile.write(new IntermediateLine("MORE",String.valueOf(e1.getDirection()),String.valueOf(e2.getDirection()),String.valueOf(direction)));
        return new Expression(direction++);
    }
    Expression less(Expression e1, Expression e2){
        intermediateFile.write(new IntermediateLine("LESS",String.valueOf(e1.getDirection()),String.valueOf(e2.getDirection()),String.valueOf(direction)));
        return new Expression(direction++);
    }   
    void asignValue(String id, Expression e){
        intermediateFile.write(new IntermediateLine("LOAD_DIRECTION", String.valueOf(e.getDirection()), "null",String.valueOf(table.getSymbolDirection(id))));      
    }
    void closeIntermediateFile(){
        intermediateFile.close();
    }
    void condicion(Expression e, int number){
        intermediateFile.write(new IntermediateLine("JUMP_CONDITION", String.valueOf(e.getDirection()), "null","ELSE_"+String.valueOf(number)));
    }
    void condition2(Expression e, int number) {
        intermediateFile.write(new IntermediateLine("JUMP_CONDITION", String.valueOf(e.getDirection()), "null","LOOPEND_"+String.valueOf(number)));
    }
    void jumpLabel(String label, int number){
        intermediateFile.write(new IntermediateLine("JUMP_LABEL", "null", "null", label+"_"+String.valueOf(number)));
    }
    void setLabel(String label, int number){
        intermediateFile.write(new IntermediateLine("LABEL", "null", "null", label+"_"+String.valueOf(number)));
    }
    void printW(Expression e){
        intermediateFile.write(new IntermediateLine("PRINT_INT", String.valueOf(e.getDirection()), "null", "null"));        
    }
    void printS(String c, int number){
        constantList.add(c);
        intermediateFile.write(new IntermediateLine("PRINT_CONSTANT", "CONSTANT_"+String.valueOf(number), "null", "null"));        
    }
    void printS2(String id){
        intermediateFile.write(new IntermediateLine("PRINT_CONSTANT", id, "null", "null"));        
    }
    void generateConstants() {
        for(int i=0; i<constantList.size(); i++){
            intermediateFile.write(new IntermediateLine("PUT_CONSTANT", "CONSTANT_"+String.valueOf(i+1), "null", constantList.get(i)));          
        }
    }
    void generateStrings() {
        for(int i=0; i<stringList.size(); i++){
            intermediateFile.write(new IntermediateLine("PUT_CONSTANT", stringList.get(i).getId(), "null", stringList.get(i).getValue()));          
        }
    }
    void programEnd(){
        intermediateFile.write(new IntermediateLine("END", "null", "null", "null"));          
    }
    void generateFinalCode(){
        FinalCode finalCode = new FinalCode("final.ens");
        try {
            finalCode.translateCode(intermediateFile);
        } catch (Exception e){

        }
    }

:}

/* Terminals and Non Terminals */ 

terminal            PLUS, MINUS, TIMES, DIVIDE; 
terminal            MORE, LESS, EQUAL, NOTEQUAL;
terminal            AND, OR, ASIGN;
terminal            LPAR, RPAR, SEMICOLON, RKEY, LKEY, RBRA, LBRA;
terminal            CONSTANT;
terminal            IDENTIFIER;
terminal            MAIN, IF, WHILE, PUTS, PUTW, INT, BREAK, ELSE;
terminal Integer    NUMBER;
terminal String     STRING;


non terminal        program;
non terminal        body;
non terminal        varlist;
non terminal        var;
non terminal        stmtlist;
non terminal        stmt;
non terminal        ifstmt;
non terminal        whilestmt;
non terminal        asignstmt;
non terminal        putwstmt;
non terminal        putsstmt;
non terminal        breakstmt;
non terminal        stmts;
non terminal        elsestmt;
non terminal        vecdecl;
non terminal        strdecl;
non terminal        intdecl;
non terminal Expression      cond;
non terminal Expression      ope;



/* Precedence */ 

precedence left     ASIGN; 
precedence left     AND, OR;
precedence left     EQUAL, NOTEQUAL;
precedence left     MORE, LESS; 
precedence left     PLUS, MINUS; 
precedence left     TIMES, DIVIDE;
precedence left     LBRA, RBRA; 
precedence left     LPAR, RPAR; 
precedence left     ELSE; 


/* Grammar Rules */ 

program ::= {:
                init();
            :}
            varlist body
            | body
            ;

body    ::= MAIN LPAR RPAR LKEY stmtlist 
                {:
                    programEnd();
                    generateConstants(); 
                    generateStrings();
                    closeIntermediateFile();
                    generateFinalCode();
                :}
            RKEY
            ;

varlist ::= varlist var
            | var
            ;

var     ::= intdecl
            | vecdecl
            | strdecl
            ;

intdecl     ::= INT IDENTIFIER:id SEMICOLON              
            {: 
                if(!exists(id.toString())){
                    addNewSymbol(sym.INT, id.toString());
                }else{
                    IDE.error = true;
                    IDE.errMessage = IDE.errMessage +(ErrorMessage.VARIABLEEXISTS+id.toString());
                }
            :}
            ;

vecdecl     ::= INT LBRA NUMBER:n RBRA IDENTIFIER:id SEMICOLON 
                {:
                    if(!exists(id.toString())){
                        addNewSymbol2(sym.INT, id.toString(),n);
                    }else{
                        IDE.error = true;
                    IDE.errMessage = IDE.errMessage +(ErrorMessage.VARIABLEEXISTS+id.toString());
                }
                :}
                ;

strdecl      ::= STRING IDENTIFIER:id SEMICOLON
                {:
                    if(!exists(id.toString())){
                        addNewSymbol(sym.STRING, id.toString());
                    }else{
                        IDE.error = true;
                        IDE.errMessage = IDE.errMessage +(ErrorMessage.VARIABLEEXISTS+id.toString());
                }
                :}
                ;

stmtlist::= stmts
            | ;

stmts   ::= stmts stmt | stmt;

stmt    ::= ifstmt
            | whilestmt
            | asignstmt
            | putwstmt
            | putsstmt
            | breakstmt
                {:
                    if(inWhile==0){
                        IDE.error = true;IDE.errMessage = IDE.errMessage +(ErrorMessage.BREAKERROR);
                    }
                :}
            ;

ifstmt      ::= IF LPAR
                    {:
                        countIf++;ifStack.push(countIf);
                    :} 
                cond:c 
                    {:
                        condicion(c, ifStack.top());
                    :} 
                RPAR LKEY stmtlist RKEY 
                    {:
                        jumpLabel("ENDIF", ifStack.top());
                        setLabel("ELSE", ifStack.top());
                    :} 
                elsestmt 
                    {:
                        setLabel("ENDIF", ifStack.top());
                        ifStack.pop();
                    :}
                ;

elsestmt    ::= ELSE LKEY stmtlist RKEY
                | ;

whilestmt   ::= WHILE LPAR
                    {:
                        countLoop++;
                        loopStack.push(countLoop);
                        setLabel("LOOP", loopStack.top());
                    :}
                cond:c
                    {:
                        condition2(c, loopStack.top());
                    :} 
                RPAR LKEY
                    {:
                        inWhile++;
                    :} 
                stmtlist 
                    {:
                        inWhile--;
                    :} 
                RKEY
                    {:
                        jumpLabel("LOOP", loopStack.top());
                        setLabel("LOOPEND", loopStack.top());
                        loopStack.pop();
                    :}
                ;

asignstmt   ::= IDENTIFIER:id ASIGN CONSTANT:c SEMICOLON 
                    {:                       
                        if(!exists(id.toString())){
                            System.out.println("BITCH");
                            IDE.error = true;
                            IDE.errMessage = IDE.errMessage +(ErrorMessage.NOVARIABLE+id.toString());
                        }
                        else{
                            RESULT=string(c.toString(),id.toString());
                        }
                    :}
                | IDENTIFIER:id ASIGN ope:e SEMICOLON
                    {:
                        if(!exists(id.toString())){
                            IDE.error = true;
                            IDE.errMessage = IDE.errMessage +(ErrorMessage.NOVARIABLE+id.toString());
                        }
                        else{
                            asignValue(id.toString(), e);
                        }
                    :}
                ;

putwstmt    ::= PUTW LPAR ope:e
                    {:
                        printW(e);
                    :} 
                RPAR SEMICOLON
                ;

putsstmt    ::= PUTS LPAR CONSTANT:c
                    {:
                        countConstant++;
                        printS(c.toString(), countConstant);
                    :} 
                RPAR SEMICOLON
                | PUTS LPAR IDENTIFIER:id
                    {:
                        printS2(id.toString());
                    :} 
                RPAR SEMICOLON
                ;

breakstmt   ::= BREAK SEMICOLON
                ;

ope     ::= ope:e1 PLUS  ope:e2                         {:RESULT=plus(e1,e2);:}                            
            | ope:e1 MINUS ope:e2                       {:RESULT=minus(e1,e2);:}                       
            | ope:e1 TIMES ope:e2                       {:RESULT=times(e1,e2);:}                        
            | ope:e1 DIVIDE ope:e2                      {:RESULT=divide(e1,e2);:}                       
            | MINUS ope:e                               {://RESULT=minus(e);:}                       
            | NUMBER:n                                  {:RESULT=number(n.toString());:}                     
            | IDENTIFIER:id                             {:if(!exists(id.toString())){
                                                            IDE.error = true;IDE.errMessage = IDE.errMessage +(ErrorMessage.NOVARIABLE+id.toString());RESULT=identifier(null);
                                                          }else{RESULT=identifier(id.toString());}
                                                           :}                                                   
            | LPAR ope:e RPAR                           {:RESULT=e;:}                          
            ;

cond    ::= cond:e1 AND cond:e2                         {:RESULT=and(e1,e2);:}                     
            | cond:e1 OR cond:e2                        {:RESULT=or(e1,e2);:}                    
            | ope:e1 EQUAL ope:e2                       {:RESULT=equal(e1,e2);:}                     
            | ope:e1 NOTEQUAL ope:e2                    {:RESULT=notequal(e1,e2);:}                     
            | ope:e1 MORE ope:e2                        {:RESULT=more(e1,e2);:}               
            | ope:e1 LESS ope:e2                        {:RESULT=less(e1,e2);:}                                
            | LPAR cond:e RPAR                          {:RESULT=e;:}
            ;

