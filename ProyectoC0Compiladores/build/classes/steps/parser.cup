package steps;

import java_cup.runtime.*;
import ui.IDE;
parser code {:

    public void syntax_error(Symbol s){
        System.out.println("Compiler has detected a syntax error at line " + s.left 
            + " column " + s.right);
    }
    
:};

/* Terminals and Non Terminals */ 

terminal            PLUS, MINUS, TIMES, DIVIDE; 
terminal            MORE, LESS, EQUAL, NOTEQUAL;
terminal            AND, OR, ASIGN;
terminal            LPAR, RPAR, SEMICOLON, RKEY, LKEY;
terminal            CONSTANT, IDENTIFIER;
terminal            MAIN, IF, WHILE, PUTS, PUTW, INT, BREAK, ELSE;
terminal Integer    NUMBER;
terminal Boolean    BOOLEAN;

non terminal        program;
non terminal        body;
non terminal        varlist;
non terminal        var;
non terminal        stmtlist;
non terminal        stmt;
non terminal        ifstmt;
non terminal        whilestmt;
non terminal        asignstmt;
non terminal        putwstmt;
non terminal        putsstmt;
non terminal        breakstmt;
non terminal        cond;
non terminal        ope;

/* Precedence */ 

precedence left     ASIGN; 
precedence left     AND, OR;
precedence left     EQUAL, NOTEQUAL;
precedence left     MORE, LESS; 
precedence left     PLUS, MINUS; 
precedence left     TIMES, DIVIDE;
precedence left     LPAR, RPAR; 
precedence left     ELSE; 


/* Grammar Rules */ 

program ::= varlist body
            | body
            ;

body    ::= MAIN LPAR RPAR LKEY stmtlist:s RKEY                                 {:RESULT = (Boolean)true;   :}
            ;

varlist ::= varlist var
            | var
            ;

var     ::= INT IDENTIFIER SEMICOLON                                            {::}
            ;

stmtlist::= stmtlist stmt                                                       {://RESULT = s;:}
            | stmt                                                              {://RESULT = s;:}
            ;
/*
stmt    ::= IF LPAR cond RPAR LKEY stmtlist RKEY 
            | IF LPAR cond RPAR LKEY stmtlist RKEY RPAR ELSE LKEY stmtlist RKEY
            | WHILE LPAR cond RPAR LKEY stmtlist RKEY
            | PUTS LPAR CONSTANT:c RPAR SEMICOLON                               {: //System.out.println("String "+(String)c);:}
            | PUTW LPAR ope:e RPAR SEMICOLON                                    {: //System.out.println("int "+(Integer)e);  :}
            | BREAK SEMICOLON                                                   {::}
            | IDENTIFIER ASIGN ope:e SEMICOLON                                  {::}
            ;
*/
stmt    ::= ifstmt
            | whilestmt
            | asignstmt
            | putwstmt
            | putsstmt
            | breakstmt
            ;

ifstmt      ::= IF LPAR cond RPAR LKEY stmtlist RKEY ELSE LKEY stmtlist RKEY
                | IF LPAR cond RPAR LKEY stmtlist RKEY  
                ;
whilestmt   ::= WHILE LPAR cond RPAR 
                LKEY stmtlist RKEY
                ;
asignstmt   ::= IDENTIFIER ASIGN ope:e SEMICOLON
                ;
putwstmt    ::= PUTW LPAR ope:e RPAR SEMICOLON
               ;
putsstmt    ::= PUTS LPAR CONSTANT:c RPAR SEMICOLON
                ;
breakstmt   ::= BREAK SEMICOLON
                ;

ope     ::= ope:e1 PLUS  ope:e2                                                 {: //RESULT = (Integer)e1+(Integer)e2;       :}
            | ope:e1 MINUS ope:e2                                               {: //RESULT = (Integer)e1-(Integer)e2;       :}
            | ope:e1 TIMES ope:e2                                               {: //RESULT = (Integer)e1*(Integer)e2;       :}
            | ope:e1 DIVIDE ope:e2                                              {: //RESULT = (Integer)e1/(Integer)e2;       :}
            | MINUS ope:e                                                       {: //RESULT = new Integer(0-(Integer)e);     :}
            | NUMBER:n                                                         {: //RESULT = n;                             :}
            | IDENTIFIER:n                                                      {::}
            | LPAR ope:e RPAR                                                   {: //RESULT = e;                             :}  
            ;

cond    ::= BOOLEAN:n                                                           {: //RESULT = n;                                                      :}
            | cond:e1 AND cond:e2                                               {: //RESULT = (Boolean)e1 && (Boolean)e2;                             :}
            | cond:e1 OR cond:e2                                                {: //RESULT = (Boolean)e1 || (Boolean)e2;                             :}
            | cond:e1 EQUAL cond:e2                                             {: //RESULT = ((e1.equals(e2))?true:false);                           :}
            | cond:e1 NOTEQUAL cond:e2                                          {: //RESULT = ((e1.equals(e2))?false:true);                           :}
            | cond:e1 MORE cond:e2                                              {: //RESULT = (((Integer)e1).compareTo((Integer)e2))==1?true:false;   :}
            | cond:e1 LESS cond:e2                                              {: //RESULT = (((Integer)e1).compareTo((Integer)e2))==-1?true:false;  :}         
            | LPAR cond:e RPAR                                                  {: //RESULT = e;                                                      :}
            ;