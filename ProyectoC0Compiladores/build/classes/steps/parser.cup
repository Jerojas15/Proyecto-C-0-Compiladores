package steps;

import java_cup.runtime.*;
import ui.IDE;
import structures.*;
parser code {:

    public void syntax_error(java_cup.runtime.Symbol s){
        IDE.error = true;
        IDE.errMessage = IDE.errMessage +("Compiler has detected a syntax error at line " + (s.left+1) 
            + " column " + s.right + " symbol " + s.value);
    }
    public void report_fatal_error(String message, Object info) {
        IDE.error = true;
        IDE.errMessage = IDE.errMessage +("Fatal Error! Your code is about to explode");
    }
:};

action code {:
    Table table;
    int inWhile;
    void init(){
        table = new Table();
        inWhile = 0;
    }
    boolean exists(String symbol){
        return table.ContainedInSymbolTable(symbol);
    }
    void addNewSymbol(int code, String symbol){
        table.addNewSymbol(code, symbol);
    }
:}

/* Terminals and Non Terminals */ 

terminal            PLUS, MINUS, TIMES, DIVIDE; 
terminal            MORE, LESS, EQUAL, NOTEQUAL;
terminal            AND, OR, ASIGN;
terminal            LPAR, RPAR, SEMICOLON, RKEY, LKEY;
terminal            CONSTANT, IDENTIFIER;
terminal            MAIN, IF, WHILE, PUTS, PUTW, INT, BREAK, ELSE;
terminal Integer    NUMBER;
terminal Boolean    BOOLEAN;

non terminal        program;
non terminal        body;
non terminal        varlist;
non terminal        var;
non terminal        stmtlist;
non terminal        stmt;
non terminal        ifstmt;
non terminal        whilestmt;
non terminal        asignstmt;
non terminal        putwstmt;
non terminal        putsstmt;
non terminal        breakstmt;
non terminal        cond;
non terminal        ope;
non terminal        stmts;

/* Precedence */ 

precedence left     ASIGN; 
precedence left     AND, OR;
precedence left     EQUAL, NOTEQUAL;
precedence left     MORE, LESS; 
precedence left     PLUS, MINUS; 
precedence left     TIMES, DIVIDE;
precedence left     LPAR, RPAR; 
precedence left     ELSE; 


/* Grammar Rules */ 

program ::= {:init();:}
            varlist body
            | body
            ;

body    ::= MAIN LPAR RPAR LKEY stmtlist RKEY
            ;

varlist ::= varlist var
            | var
            ;

var     ::= INT IDENTIFIER:id SEMICOLON              {: if(!exists(id.toString())){
                                                            addNewSymbol(sym.INT, id.toString());
                                                        }else{
                                                            IDE.error = true;
                                                            IDE.errMessage = IDE.errMessage +(ErrorMessages.VARIABLEEXISTS+id.toString());}:}
            ;

stmtlist::= stmts
            | ;

stmts   ::= stmts stmt | stmt;

stmt    ::= ifstmt
            | whilestmt
            | asignstmt
            | putwstmt
            | putsstmt
            | breakstmt                     {:if(inWhile==0){IDE.error = true;IDE.errMessage = IDE.errMessage +(ErrorMessages.BREAKERROR);}:}
            ;

ifstmt      ::= IF LPAR cond RPAR LKEY stmtlist RKEY ELSE LKEY stmtlist RKEY
                | IF LPAR cond RPAR LKEY stmtlist RKEY  
                ;

whilestmt   ::= WHILE LPAR cond RPAR LKEY{:inWhile++;:} stmtlist {:inWhile--;:} RKEY
                ;

asignstmt   ::= IDENTIFIER:id ASIGN ope SEMICOLON          {:if(!exists(id.toString())){
                                                            IDE.error = true;IDE.errMessage = IDE.errMessage +(ErrorMessages.NOVARIABLE+id.toString());}
                                                           :}
                ;

putwstmt    ::= PUTW LPAR ope RPAR SEMICOLON
               ;

putsstmt    ::= PUTS LPAR CONSTANT RPAR SEMICOLON
                ;

breakstmt   ::= BREAK SEMICOLON
                ;

ope     ::= ope:e1 PLUS  ope:e2                                                 
            | ope:e1 MINUS ope:e2                                              
            | ope:e1 TIMES ope:e2                                               
            | ope:e1 DIVIDE ope:e2                                             
            | MINUS ope:e                                                      
            | NUMBER:n                                                        
            | IDENTIFIER:id                                  {:if(!exists(id.toString())){
                                                            IDE.error = true;IDE.errMessage = IDE.errMessage +(ErrorMessages.NOVARIABLE+id.toString());}
                                                           :}             
            | LPAR ope:e RPAR                                                     
            ;

cond    ::= cond:e1 AND cond:e2                                              
            | cond:e1 OR cond:e2                                            
            | ope:e1 EQUAL ope:e2                                            
            | ope:e1 NOTEQUAL ope:e2                                         
            | ope:e1 MORE ope:e2                                       
            | ope:e1 LESS ope:e2                                             
            | BOOLEAN:n                                                
            | LPAR cond:e RPAR                       
            ;

