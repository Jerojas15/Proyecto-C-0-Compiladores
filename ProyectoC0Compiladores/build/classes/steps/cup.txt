package steps;

import java_cup.runtime.*;

parser code {:

public void report_error(String message, Object info) {
   
        /* Create a StringBuilder called 'm' with the string 'Error' in it. */
        StringBuilder m = new StringBuilder("Error");
        if (info instanceof java_cup.runtime.Symbol) {
            java_cup.runtime.Symbol s = ((java_cup.runtime.Symbol) info);
            if (s.left >= 0) {                
                m.append(" in line "+(s.left+1));   
                if (s.right >= 0)                    
                    m.append(", column "+(s.right+1));
            }
        }

        m.append(" : "+message);

        System.err.println(m);
    }

    public void report_fatal_error(String message, Object info) {
        report_error(message, info);
        System.exit(1);
    }


:};

/* Terminals and Non Terminals */ 

terminal            PLUS, MINUS, TIMES, DIVIDE; 
terminal            MORE, LESS, EQUAL, NOTEQUAL;
terminal            AND, OR, ASIGN;
terminal            LPAR, RPAR, SEMICOLON, RKEY, LKEY;
terminal            CONSTANT, IDENTIFIER;
terminal            MAIN, IF, WHILE, PUTS, PUTW, INT, BREAK, ELSE;
terminal Integer    INTEGER;
terminal Boolean    BOOLEAN;

non terminal        program;
non terminal        stmtlist;
non terminal        stmt;
non terminal        cond;
non terminal        expr;
non terminal        ope;

/* Precedence */ 

precedence left     LPAR, RPAR; 
precedence left     TIMES, DIVIDE; 
precedence left     PLUS, MINUS; 
precedence left     MORE, LESS; 
precedence left     EQUAL, NOTEQUAL; 
precedence left     AND, OR;
precedence left     ASIGN;  

/* Grammar Rules */ 

program     ::= MAIN LPAR RPAR LKEY stmtlist:s RKEY {:System.out.println("SI ENTRA");RESULT = s;   :};

stmtlist    ::= stmt:s stmtlist:sl                          {:RESULT = s;:}
                |stmt:s                                     {:RESULT = s;:}
                ;

stmt    ::=    IF LPAR cond:c RPAR LKEY stmt:s RKEY ELSE LKEY stmt:s2 RKEY    {: RESULT = ((Boolean)c)?s:s2;:}
               | IF LPAR cond:c RPAR LKEY stmt:s RKEY                             {: if((Boolean)c){RESULT = s;}:}
               | expr:s                                                         {:RESULT = s;:}
                ;

expr    ::=     ope:e SEMICOLON                 {:RESULT = e;:}
                | PUTS LPAR CONSTANT:c RPAR SEMICOLON                           {: System.out.println("String "+(String)c);:}
                | PUTW LPAR ope:e RPAR SEMICOLON                                {: System.out.println("int "+(Integer)e);:}
                ;

ope     ::=      LPAR ope:e RPAR              {: RESULT = e;                             :}
                | ope:e1 PLUS  ope:e2           {: RESULT = (Integer)e1+(Integer)e2;       :}
                | ope:e1 MINUS ope:e2         {: RESULT = (Integer)e1-(Integer)e2;       :}
                | ope:e1 TIMES ope:e2         {: RESULT = (Integer)e1*(Integer)e2;       :}
                | ope:e1 DIVIDE ope:e2        {: RESULT = (Integer)e1/(Integer)e2;       :}
                | MINUS ope:e                  {: RESULT = new Integer(0-(Integer)e);     :}
                | INTEGER:n                       {: RESULT = n;                             :}
                ;

cond    ::=     BOOLEAN:n                     {: RESULT = n;                                                      :}
                | LPAR cond:e RPAR              {: RESULT = e;                                                      :}
                | cond:e1 AND cond:e2             {: RESULT = (Boolean)e1 && (Boolean)e2;                             :}
                | cond:e1 OR cond:e2            {: RESULT = (Boolean)e1 || (Boolean)e2;                             :}
                | cond:e1 EQUAL cond:e2         {: RESULT = ((e1.equals(e2))?true:false);                           :}
                | cond:e1 NOTEQUAL cond:e2      {: RESULT = ((e1.equals(e2))?false:true);                           :}
                | cond:e1 MORE cond:e2          {: RESULT = (((Integer)e1).compareTo((Integer)e2))==1?true:false;   :}
                | cond:e1 LESS cond:e2          {: RESULT = (((Integer)e1).compareTo((Integer)e2))==-1?true:false;  :}
                ;
